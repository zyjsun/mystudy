// 存在n+1个房间，每个房间依次为房间1 2 3...i，每个房间都存在一个传送门，
// i房间的传送门可以把人传送到房间pi(1<=pi<=i),
// 现在路人甲从房间1开始出发(当前房间1即第一次访问)，每次移动他有两种移动策略：
//     A. 如果访问过当前房间 i 偶数次，那么下一次移动到房间i+1；
//     B. 如果访问过当前房间 i 奇数次，那么移动到房间pi；
// 现在路人甲想知道移动到房间n+1一共需要多少次移动；

//动态规划 ，dp[i]表示第一次到达i所要的次数
// dp[i]=dp[i-1]+第二次到达i-1的次数加1
// 第二次到达i-1的次数=1+p[i-1]到i-1的次数
//因为第一次到达i-1以后，i-1之前的肯定都走过了偶数次
//所以p[i-1]到i-1的次数等于第一次由p[i-1]到i-1的次数
//转移方程：dp[i] = dp[i -1] + 1 + dp[i - 1] - dp[p[i-1]] + 1
//dp[i] = 2*dp[i - 1] - dp[p[i - 1]] + 2

function dpRoom (n) {
  let p = [], dp = []
  let i, j
  // for (i = 1; i <= n; i++) {
  //   p[i] = Math.floor(Math.random() * i)
  //   console.log(p[i]);
  // }
  dp[1] = 0
  for (j = 2; j <= n; j++) {
    dp[j] = (2 * dp[j - 1] - dp[p[i - 1]] + 2)
  }
  return dp[n]
}

console.log(dpRoom(9));



